#!/usr/bin/env php
<?php
$QUEUE = getenv('QUEUE');
if (empty($QUEUE)) {
    die("Set QUEUE env var containing the list of queues to work.\n");
}
require_once __DIR__ . "/../../../autoload.php";
$REDIS_BACKEND = getenv('REDIS_BACKEND');
$REDIS_BACKEND_DB = getenv('REDIS_BACKEND_DB');
if (!empty($REDIS_BACKEND)) {
    if (empty($REDIS_BACKEND_DB)) {
        Resque::setBackend($REDIS_BACKEND);
    } else {
        Resque::setBackend($REDIS_BACKEND, $REDIS_BACKEND_DB);
    }
}
$logLevel = false;
$LOGGING = getenv('LOGGING');
$VERBOSE = getenv('VERBOSE');
$VVERBOSE = getenv('VVERBOSE');
if (!empty($LOGGING) || !empty($VERBOSE)) {
    $logLevel = true;
} else if (!empty($VVERBOSE)) {
    $logLevel = true;
}
$APP_INCLUDE = getenv('APP_INCLUDE');
if ($APP_INCLUDE) {
    if (!file_exists($APP_INCLUDE)) {
        die('APP_INCLUDE (' . $APP_INCLUDE . ") does not exist.\n");
    }
    require_once $APP_INCLUDE;
}
// See if the APP_INCLUDE containes a logger object,
// If none exists, fallback to internal logger
if (!isset($logger) || !is_object($logger)) {
    $logger = new Resque_Log($logLevel);
}

$BLOCKING = getenv('BLOCKING') !== FALSE;
$interval = 5;
$INTERVAL = getenv('INTERVAL');
if (!empty($INTERVAL)) {
    $interval = $INTERVAL;
}
$count = 1;
$COUNT = getenv('COUNT');
if (!empty($COUNT) && $COUNT > 1) {
    $count = $COUNT;
}
$PREFIX = getenv('PREFIX');
if (!empty($PREFIX)) {
    $logger->log(Psr\Log\LogLevel::INFO, 'Prefix set to {prefix}', array('prefix' => $PREFIX));
    Resque_Redis::prefix($PREFIX);
}

// 自定义日志系统
$redis = new Redis();
$redis->pconnect(Resque_Redis::DEFAULT_HOST, Resque_Redis::DEFAULT_PORT);
$log = new \Monolog\Logger('resque');
$logHandle = new \Monolog\Handler\RedisHandler($redis, \Resque_Redis::getPrefix() . 'logs');
//$formatter = new \Monolog\Formatter\LogstashFormatter('marathon');
//$logHandle->setFormatter($formatter);
$log->pushHandler($logHandle);
\Wiz\ResqueBundle\Resque\LogPlugin::init(['logger' => $log, 'vverbose' => true]);

// Retry
Resque_Event::listen('onFailure', function (Exception $e, Resque_Job $job) use ($logger) {
    $args = $job->getArguments();

    if (!array_key_exists(\Wiz\ResqueBundle\Job\Job::RETRY_STORAGE, $args))
        return;

    if (!array_key_exists(\Wiz\ResqueBundle\Job\Job::RETRY_ATTEMPT, $args))
        $args[\Wiz\ResqueBundle\Job\Job::RETRY_ATTEMPT] = 0;

    $backoff = $args[\Wiz\ResqueBundle\Job\Job::RETRY_STORAGE];
    if (!array_key_exists($args[\Wiz\ResqueBundle\Job\Job::RETRY_ATTEMPT], $backoff))
        return;

    $delay = $backoff[$args[\Wiz\ResqueBundle\Job\Job::RETRY_ATTEMPT]];
    $args[\Wiz\ResqueBundle\Job\Job::RETRY_ATTEMPT]++;

    if ($delay == 0) {
        Resque::enqueue($job->queue, $job->payload['class'], $args);
        $logger->log(
                \Psr\Log\LogLevel::ERROR,
                'Job failed. Auto re-queued, attempt number: {attempt}',
                array(
                        'attempt' => $args[\Wiz\ResqueBundle\Job\Job::RETRY_ATTEMPT] - 1
                )
        );
    } else {
        $at = time() + $delay;
        ResqueScheduler::enqueueAt($at, $job->queue, $job->payload['class'], $args);
        $logger->log(
                \Psr\Log\LogLevel::ERROR,
                'Job failed. Auto re-queued. Scheduled for: {timestamp}, attempt number: {attempt}',
                array(
                        'timestamp' => date('Y-m-d H:i:s', $at),
                        'attempt' => $args[\Wiz\ResqueBundle\Job\Job::RETRY_ATTEMPT] - 1
                )
        );
    }
});

if ($count > 1) {
    for ($i = 0; $i < $count; ++$i) {
        $pid = Resque::fork();
        if ($pid == -1) {
            $logger->log(Psr\Log\LogLevel::EMERGENCY, 'Could not fork worker {count}', array('count' => $i));
            die();
        } else if (!$pid) {
            // Child, start the worker
            $queues = explode(',', $QUEUE);
            $worker = new Resque_Worker($queues);
            $worker->setLogger($logger);
            $logger->log(Psr\Log\LogLevel::NOTICE, 'Starting worker {worker}', array('worker' => $worker));
            $worker->work($interval, $BLOCKING);
            break;
        }
    }
} else {
    // Start a single worker
    $queues = explode(',', $QUEUE);
    $worker = new Resque_Worker($queues);
    $worker->setLogger($logger);
    $PIDFILE = getenv('PIDFILE');
    if ($PIDFILE) {
        file_put_contents($PIDFILE, getmypid()) or
        die('Could not write PID information to ' . $PIDFILE);
    }
    $logger->log(Psr\Log\LogLevel::NOTICE, 'Starting worker {worker}', array('worker' => $worker));
    $worker->work($interval, $BLOCKING);
}